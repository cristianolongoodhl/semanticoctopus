package org.opendatahacklab.semanticoctopus.aggregation;

import java.net.URL;
import java.util.Collection;

/**
 * An Aggregation Engine is a query engine whose underlying knowledge base
 * is generated by aggregating different ontologies retrieved from the web.
 * It which provide an additional build method to perfomr aggregation and,
 * if the ontology was yet aggregated, get new online contents. Such an 
 * engine can be in the following states: 
 * IDLE at startup, the underlying ontology is empty and no ontology has been aggregated;
 * READY when the query engine is running,
 * this is the solely state in which the query functionality is available;
 * BUILDING when the engine is preparing the knowledge base, at startup or
 * as consequence of a refresh request; ERROR if some error occurred
 * during the last update. The ERROR may be fixed with a subsequent refresh.
 * 
 * The final state is DISPOSED. In this state all resources has been free and threads
 * started for some purposes, other than the main one, has been stopped. In building engine
 * any dispose request is just ignored. 
 * 
 * Aggregation Engines SHOULD be created via an {@link AggregationEngineFactory}
 * 
 * @author Cristiano Longo
 *
 * This file is part of Semantic Octopus.
 * 
 * Copyright 2017 Cristiano Longo, Antonio Pisasale
 *
 * Semantic Octopus is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Semantic Octopus is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
public interface AggregationEngine extends QueryEngine{
	enum State {
		IDLE, BUILDING, READY, ERROR, DISPOSED; 
	}
	
	/**
	 * Get the set of ontologies which contributed to create the
	 * underlying knowledge base.
	 * 
	 * @return
	 */
	Collection<URL> getOntologies();
	
	/**
	 * Perform an aggregation by downloading and/or refreshing the underlying ontologies
	 */
	void build();
	
	/**
	 * Get the current state of the engine.
	 * 
	 * @return
	 */
	State getState();	
}
