package org.opendatahacklab.semanticoctopus.aggregation;

import java.net.URL;
import java.util.Collection;

/**
 * An Aggregation Engine is a query engine whose underlying knowledge base
 * is generated by aggregating different ontologies retrieved from the web.
 * It which provide an additional build method to perfomr aggregation and,
 * if the ontology was yet aggregated, get new online contents. Such an 
 * engine can be in the following states: 
 * IDLE at startup, the underlying ontology is empty and no ontology has been aggregated;
 * READY when the query engine is running,
 * this is the solely state in which the query functionality is available;
 * BUILDING when the engine is preparing the knowledge base, at startup or
 * as consequence of a refresh request; ERROR if some error occurred
 * during the last update. The ERROR may be fixed with a subsequent refresh.
 * 
 * The final state is DISPOSED. In this state all resources has been free and threads
 * started for some purposes, other than the main one, has been stopped. In building engine
 * any dispose request is just ignored. 
 * 
 * Aggregation Engines SHOULD be created via an {@link AggregationEngineFactory}
 * 
 * @author Cristiano Longo
 *
 */
public interface AggregationEngine extends QueryEngine{
	enum State {
		IDLE, BUILDING, READY, ERROR, DISPOSED; 
	}
	
	/**
	 * Get the set of ontologies which contributed to create the
	 * underlying knowledge base.
	 * 
	 * @return
	 */
	Collection<URL> getOntologies();
	
	/**
	 * Perform an aggregation by downloading and/or refreshing the underlying ontologies
	 */
	void build();
	
	/**
	 * Get the current state of the engine.
	 * 
	 * @return
	 */
	State getState();	
}
